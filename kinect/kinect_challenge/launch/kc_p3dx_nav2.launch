<launch>    

    <arg name="HOME" default="$(env HOME)" />

    <!--  set one and only one of these true (1)-->
    <arg name="USE_FREENECT" default="false" />
    <arg name="USE_OPENNI"   default="true" />

    <arg name="map_file" default="$(find kinect_challenge)/maps/map.yaml"/>

    <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description"	command="$(find xacro)/xacro.py '$(find kinect)/urdf/p3dx_real.xacro'" />

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="30.0" />
    </node>

    <node pkg="tf" type="static_transform_publisher" name="static_transform_publisherx" args=" 0 0 0 0 0 0         base_link base_footprint 50"/>
    <node pkg="tf" type="static_transform_publisher" name="static_transform_publisher2" args="-0.2 0 0.036 0 0 0   base_link center_wheel 50"/>
    <node pkg="tf" type="static_transform_publisher" name="static_transform_publisher3" args="-0.178 0 0.052 0 0 0 base_link swivel 50"/>
    
    <node pkg="rosaria" type="RosAria" name="RosAria" />
    
    <node pkg="topic_tools" type="relay" name="relay1" args="/RosAria/pose /odom" />
    <node pkg="topic_tools" type="relay" name="relay2" args="/robot_cmd_vel /RosAria/cmd_vel" />

    <include  if="$(arg USE_FREENECT)" file="$(find kinect_challenge)/launch/freenect.launch" >
        <arg name="depth_registration" value="true" />
    </include>
    
    <include  if="$(arg USE_OPENNI)" file="$(find openni_launch)/launch/openni.launch" >
        <arg name="depth_registration" value="true" />
    </include>

    <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan">
        <param name="scan_height" value="100"/>
        <param name="output_frame_id" value="/camera_depth_frame"/>
        <param name="range_min" value="0.45"/>
        <remap from="image" to="/camera/depth_registered/image_raw"/>
        <remap from="scan" to="/scan"/>
    </node>

    <group ns="rtabmap">

        <node name="rtabmap" pkg="rtabmap" type="rtabmap" output="screen" args="" >

            <!-- param name="config_path" type="str" value="$(find kinect_challenge)/config/rtabmap_config_nav.ini"/ -->

            <param name="frame_id" type="string" value="base_link"/>

            <param name="subscribe_depth" type="bool" value="true"/>
            <param name="subscribe_laserScan" type="bool" value="true"/>

            <param name="Rtabmap/DatabasePath" type="string" value="$(arg HOME)/.ros/rtabmap.db"/>  <!-- Database used for localization -->
            <param name="Rtabmap/DetectionRate" type="string" value="3"/>                 <!-- Don't need to do relocation very often! Though better results if the same rate as when mapping. -->

            <param name="Mem/STMSize" type="string" value="1"/>                           <!-- 1 location in short-term memory -->
            <param name="Mem/IncrementalMemory" type="string" value="false"/>             <!-- false = Localization mode-->

            <param name="RGBD/ScanMatchingSize" type="string" value="1"/>                 <!-- Do odometry correction with consecutive laser scans -->
            <param name="RGBD/LocalLoopDetectionSpace" type="string" value="false"/>      <!-- Local loop closure detection (using estimated position) with locations in WM -->
            <param name="RGBD/LocalLoopDetectionTime" type="string" value="false"/>       <!-- Local loop closure detection with locations in STM -->

            <param name="LccIcp/Type" type="string" value="1"/>                           <!-- 0=No ICP, 1=ICP 3D, 2=ICP 2D -->
            <param name="LccBow/MaxDepth" type="string" value="0.0"/>                     <!-- 3D visual words maximum depth 0=infinity -->
            <param name="LccBow/InlierDistance" type="string" value="0.1"/>               <!-- 3D visual words correspondence distance -->
            <param name="LccBow/MinInliers" type="string" value="10"/>

            <param name="Odom/MinInliers" type="string" value="10"/>

            <param name="Rtabmap/StatisticLogged" type="string" value="true"/>
            <param name="RGBD/OptimizeFromGraphEnd" value = "false" type="string" />
            
            <param name="queue_size" type="int" value="10"/>

            <remap from="odom" to="/odom"/>
            <remap from="scan" to="/scan"/>

            <remap from="rgb/image" to="/camera/rgb/image_rect_color"/>
            <remap from="depth/image" to="/camera/depth_registered/image_raw"/>
            <remap from="rgb/camera_info" to="/camera/depth_registered/camera_info"/>
        </node>
        
        <node pkg="rtabmap" type="rtabmapviz" name="rtabmapviz" args="-d $(find kinect_challenge)/config/rtabmap_config_nav.ini" output="screen">
            <param name="subscribe_depth" type="bool" value="true"/>
            <param name="subscribe_laserScan" type="bool" value="false"/>
            <param name="queue_size" type="int" value="30"/>

            <remap from="rgb/image" to="/camera/rgb/image_rect_color"/>
            <remap from="depth/image" to="/camera/depth_registered/image_raw"/>
            <remap from="rgb/camera_info" to="/camera/depth_registered/camera_info"/>
            <remap from="odom" to="/odom"/>
        </node>
        
        <node pkg="rtabmap" type="grid_map_assembler" name="grid_map_assembler" output="screen">
            <remap from="grid_map" to="/map"/>
            <param name="scan_voxel_size" type="str" value="0.01" />
        </node>

    </group>
        
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find rtabmap)/launch/config/rgbd.rviz"/>

    <!--  Change Teleop config if using different method or controller  -->
    <!--  <include file="$(find turtlebot_teleop)/launch/ps3_teleop.launch" />  -->
    <!--  <include file="$(find kinect_challenge)/launch/ps3_teleop.launch" />  -->
    
    <include file="$(find p3dx_launch)/launch/xbox360_teleop.launch" >
        <arg name="output_cmd_vel_topic" value="/smoothed_teleop_cmd_vel"/>
    </include>
    
    <include ns="nav_smoother" file="$(find p3dx_launch)/launch/includes/velocity_smoother.launch.xml">
        <arg name="output_cmd_vel_topic" value="/nav_cmd_vel"/>
        <arg name="input_cmd_vel_topic"  value="/nav_cmd_vel_raw"/>
    </include>

    <!-- include file="$(find turtlebot_navigation)/launch/includes/safety_controller.launch.xml"/ -->

    <!-- velocity commands multiplexer -->
    <node pkg="nodelet" type="nodelet" name="cmd_vel_mux" args="load yocs_cmd_vel_mux/CmdVelMuxNodelet /mobile_base_nodelet_manager">
        <param name="yaml_cfg_file" value="$(find p3dx_launch)/param/mux.yaml"/>
        <remap from="cmd_vel_mux/output"       to="/robot_cmd_vel"/>
        <remap from="cmd_vel_mux/input/teleop" to="/smoothed_teleop_cmd_vel" />
        <remap from="cmd_vel_mux/input/navi"   to="/nav_cmd_vel" />
    </node>


    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <rosparam file="$(find kinect_challenge)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find kinect_challenge)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find kinect_challenge)/param/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find kinect_challenge)/param/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find kinect_challenge)/param/base_local_planner_params.yaml" command="load" />
        <rosparam file="$(find kinect_challenge)/param/move_base_params.yaml" command="load" />

        <remap from="cmd_vel" to="/nav_cmd_vel_raw"/>
        <remap from="odom" to="/odom"/>
    </node>
   
    <node type="msbmio_svs" name="msbmio_svs" pkg="kinect_challenge" output="screen">

        <!-- host IP address, IP address of PC running Microsoft Benchmark -->
        <!-- set to "sim" to simulate connection to the Microsoft app (always returns "OK") -->
        <param name="host_IP" type="str" value="sim" />

        <!-- port to talk to Microsoft Benchmark on -->
        <param name="host_port" type="int" value="7576" />

    </node>
  
    <node type="Navigator2.py" name = "Navigator"    pkg="kinect_challenge" output="screen">
        <param name="MapPath" type="str" value="$(find kinect_challenge)/maps" />
        
        <remap from="cmd_vel" to="/p3dx/cmd_vel" />
   
        <!-- Waypoints saved here, file in maps folder -->
        <param name="WaypointFile" type="str" value="waypoints.wp" />
        
        <!-- Create/Edit this file to determine the route to take during navigation
            file is in the maps folder.
            syntax: One landmark pair per line, landmark ids 0 based
            <to landmark id>  <from landmark id>
            ...
            
        -->
        <param name="WaypointTour" type="str" value="tour.wpt" />
    </node>

    <node pkg="sound_play" name="soundplay" type="soundplay_node.py" />


</launch>
