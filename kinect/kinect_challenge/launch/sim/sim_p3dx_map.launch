<launch>

  <arg name="HOME" default="$(env HOME)" />
      
  <group ns="rtabmap">
    <node name="rtabmap" pkg="rtabmap" type="rtabmap" output="screen" args="--delete_db_on_start">
          <param name="frame_id" type="string" value="base_link"/>
        
          <param name="subscribe_depth" type="bool" value="true"/>
          <param name="subscribe_laserScan" type="bool" value="true"/>
        
          <remap from="odom" to="/p3dx/odom"/>
          <remap from="scan" to="/scan"/>

          <remap from="rgb/image" to="/camera/rgb/image_raw"/>
          <remap from="depth/image" to="/camera/depth/image_raw"/>
          <remap from="rgb/camera_info" to="/camera/rgb/camera_info"/>
          <param name="Rtabmap/DatabasePath" type="string" value="$(arg HOME)/.ros/rtabmap.db"/>  <!-- Database location -->
          <param name="queue_size" type="int" value="10"/>
        
          <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
          <param name="Mem/IncrementalMemory" type="string" value="true"/>          <!-- true = Mapping/SLAM mode-->
  
          <param name="Rtabmap/DetectionRate" type="string" value="1"/>             <!-- Don't need to do relocation very often! Though better results if the same rate as when mapping. -->
          <param name="DbSqlite3/CacheSize" type="string" value="10000"/>           <!-- Sqlite cache size (default is 2000) -->
          <param name="RGBD/ScanMatchingSize" type="string" value="0"/>             <!-- Do odometry correction with consecutive laser scans -->
          <param name="RGBD/LocalLoopDetectionSpace" type="string" value="false"/>  <!-- Local loop closure detection (using estimated position) with locations in WM -->
          <param name="RGBD/LocalLoopDetectionTime" type="string" value="false"/>   <!-- Local loop closure detection with locations in STM -->
          <param name="Mem/BadSignaturesIgnored" type="string" value="false"/>      <!-- Don't ignore bad images for 3D node creation (e.g. white walls) -->
          <param name="LccIcp/Type" type="string" value="2"/>                       <!-- Loop closure transformation refining with ICP: 0=No ICP, 1=ICP 3D, 2=ICP 2D -->
          <param name="LccIcp2/Iterations" type="string" value="100"/>
          <param name="LccIcp2/VoxelSize" type="string" value="0"/>
          <param name="LccBow/MinInliers" type="string" value="5"/>                 <!-- 3D visual words minimum inliers to accept loop closure -->
          <param name="LccBow/MaxDepth" type="string" value="4.0"/>                 <!-- 3D visual words maximum depth 0=infinity -->
          <param name="LccBow/InlierDistance" type="string" value="0.05"/>          <!-- 3D visual words correspondence distance -->
          <param name="RGBD/AngularUpdate" type="string" value="0.01"/>             <!-- Update map only if the robot is moving -->
          <param name="RGBD/LinearUpdate" type="string" value="0.01"/>              <!-- Update map only if the robot is moving -->
          <param name="Rtabmap/TimeThr" type="string" value="0"/>
          <param name="Mem/RehearsalSimilarity" type="string" value="0.45"/>
          <param name="Mem/RehearsedNodesKept" type="string" value="false"/>   
          <param name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/>    <!-- Optimize graph from the latest node -->
    </node>
    
    <node pkg="rtabmap" type="grid_map_assembler" name="grid_map_assembler" output="screen">
       <remap from="grid_map" to="/map"/>
       <param name="scan_voxel_size" type="str" value="0.01" />
    </node>
    
  </group>
    
  <node type="msbmio_svs.py" name = "msbmio_svs" pkg="kinect_challenge" output="screen">
    <!-- host IP address, IP address of PC running Microsoft Benchmark -->
    <!-- set to "sim" to simulate connection to the Microsoft app (always returns "OK") -->
    <param name="host_IP" type="str" value="sim" />
    
    <!-- port to talk to Microsoft Benchmark on -->
    <param name="host_port" type="int" value="7576" />
  </node>
    
  <node type="mapper.py"    name="mapper"    pkg="kinect_challenge" output="screen">
    <param name="map_path" type="str" value="$(find kinect_challenge)/maps/sim" />
    
    <!-- Waypoints saved during mapping, file in maps folder -->
    <!-- any existing waypoint file is backed up to a file with time stamp appended to the name -->
    <param name="waypoint_file" type="str" value="waypoints.wp" />
    
    <!-- Button index for joystick button used to place a landmark -->
    <param name="lm_button_index"    type="int" value="2" />
    
    <!-- Button index for joystick button used to save current map -->
    <!-- map saved to map folder, file name = map_<timestamp>.[png|yaml] -->
    <!-- map  saved to map folder, file name = map.[png|yaml] -->
    <param name="ms_button_index"    type="int" value="1" />
  </node>
  
  <node pkg="sound_play" name="soundplay" type="soundplay_node.py" />
  
</launch>

